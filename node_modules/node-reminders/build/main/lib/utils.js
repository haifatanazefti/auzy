"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];
    result["default"] = mod;
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
const execa_1 = __importDefault(require("execa"));
const path = __importStar(require("path"));
const JXA_SCRIPTS_DIRNAME = 'jxa';
function jxaPath(name) {
    return path.join(__dirname, '..', JXA_SCRIPTS_DIRNAME, `${name}.jxa`);
}
exports.JXA_SCRIPTS = {
    createList: jxaPath('create-list'),
    createReminder: jxaPath('create-reminder'),
    deleteReminder: jxaPath('delete-reminder'),
    getList: jxaPath('get-list'),
    getLists: jxaPath('get-lists'),
    getReminder: jxaPath('get-reminder'),
    getReminders: jxaPath('get-reminders'),
    updateReminder: jxaPath('update-reminder'),
};
async function execJXA(scriptPath, data) {
    const prefix = process.env.NODE_ENV === 'test' ? 'test' : '';
    const { stderr } = await execa_1.default(prefix + 'osascript', [
        '-l',
        'JavaScript',
        scriptPath,
        JSON.stringify(data),
    ]);
    return JSON.parse(stderr);
}
exports.execJXA = execJXA;
/**
 * Takes an object and return an equivalent object with string dates converted to Date objects
 */
function withParsedDates(data) {
    const dateProps = [
        'completionDate',
        'creationDate',
        'dueDate',
        'modificationDate',
        'remindMeDate',
    ];
    const final = Object.keys(data).reduce((obj, prop) => {
        const isDate = dateProps.indexOf(prop) !== -1;
        const val = data[prop];
        const newObj = Object.assign(Object.assign({}, obj), { [prop]: isDate ? new Date(val) : val });
        return newObj;
    }, {});
    return final;
}
exports.withParsedDates = withParsedDates;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidXRpbHMuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi9zcmMvbGliL3V0aWxzLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7OztBQUFBLGtEQUEwQjtBQUMxQiwyQ0FBNkI7QUFFN0IsTUFBTSxtQkFBbUIsR0FBRyxLQUFLLENBQUM7QUFFbEMsU0FBUyxPQUFPLENBQUMsSUFBWTtJQUMzQixPQUFPLElBQUksQ0FBQyxJQUFJLENBQUMsU0FBUyxFQUFFLElBQUksRUFBRSxtQkFBbUIsRUFBRSxHQUFHLElBQUksTUFBTSxDQUFDLENBQUM7QUFDeEUsQ0FBQztBQUVZLFFBQUEsV0FBVyxHQUFHO0lBQ3pCLFVBQVUsRUFBRSxPQUFPLENBQUMsYUFBYSxDQUFDO0lBQ2xDLGNBQWMsRUFBRSxPQUFPLENBQUMsaUJBQWlCLENBQUM7SUFDMUMsY0FBYyxFQUFFLE9BQU8sQ0FBQyxpQkFBaUIsQ0FBQztJQUMxQyxPQUFPLEVBQUUsT0FBTyxDQUFDLFVBQVUsQ0FBQztJQUM1QixRQUFRLEVBQUUsT0FBTyxDQUFDLFdBQVcsQ0FBQztJQUM5QixXQUFXLEVBQUUsT0FBTyxDQUFDLGNBQWMsQ0FBQztJQUNwQyxZQUFZLEVBQUUsT0FBTyxDQUFDLGVBQWUsQ0FBQztJQUN0QyxjQUFjLEVBQUUsT0FBTyxDQUFDLGlCQUFpQixDQUFDO0NBQzNDLENBQUM7QUFFSyxLQUFLLFVBQVUsT0FBTyxDQUFZLFVBQWtCLEVBQUUsSUFBUTtJQUNuRSxNQUFNLE1BQU0sR0FBRyxPQUFPLENBQUMsR0FBRyxDQUFDLFFBQVEsS0FBSyxNQUFNLENBQUMsQ0FBQyxDQUFDLE1BQU0sQ0FBQyxDQUFDLENBQUMsRUFBRSxDQUFDO0lBRTdELE1BQU0sRUFBRSxNQUFNLEVBQUUsR0FBRyxNQUFNLGVBQUssQ0FBQyxNQUFNLEdBQUcsV0FBVyxFQUFFO1FBQ25ELElBQUk7UUFDSixZQUFZO1FBQ1osVUFBVTtRQUNWLElBQUksQ0FBQyxTQUFTLENBQUMsSUFBSSxDQUFDO0tBQ3JCLENBQUMsQ0FBQztJQUVILE9BQU8sSUFBSSxDQUFDLEtBQUssQ0FBQyxNQUFNLENBQUMsQ0FBQztBQUM1QixDQUFDO0FBWEQsMEJBV0M7QUFFRDs7R0FFRztBQUNILFNBQWdCLGVBQWUsQ0FBNEMsSUFBTztJQUNoRixNQUFNLFNBQVMsR0FBdUI7UUFDcEMsZ0JBQWdCO1FBQ2hCLGNBQWM7UUFDZCxTQUFTO1FBQ1Qsa0JBQWtCO1FBQ2xCLGNBQWM7S0FDZixDQUFDO0lBQ0YsTUFBTSxLQUFLLEdBQUcsTUFBTSxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsQ0FBQyxNQUFNLENBQUMsQ0FBQyxHQUFHLEVBQUUsSUFBSSxFQUFFLEVBQUU7UUFDbkQsTUFBTSxNQUFNLEdBQUcsU0FBUyxDQUFDLE9BQU8sQ0FBQyxJQUFJLENBQUMsS0FBSyxDQUFDLENBQUMsQ0FBQztRQUM5QyxNQUFNLEdBQUcsR0FBRyxJQUFJLENBQUMsSUFBSSxDQUFDLENBQUM7UUFDdkIsTUFBTSxNQUFNLG1DQUFRLEdBQUcsS0FBRSxDQUFDLElBQUksQ0FBQyxFQUFFLE1BQU0sQ0FBQyxDQUFDLENBQUMsSUFBSSxJQUFJLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQyxDQUFDLEdBQUcsR0FBRSxDQUFDO1FBQ2hFLE9BQU8sTUFBTSxDQUFDO0lBQ2hCLENBQUMsRUFBRSxFQUFFLENBQUMsQ0FBQztJQUNQLE9BQU8sS0FBVSxDQUFDO0FBQ3BCLENBQUM7QUFmRCwwQ0FlQyJ9