import execa from 'execa';
import * as path from 'path';
const JXA_SCRIPTS_DIRNAME = 'jxa';
function jxaPath(name) {
    return path.join(__dirname, '..', JXA_SCRIPTS_DIRNAME, `${name}.jxa`);
}
export const JXA_SCRIPTS = {
    createList: jxaPath('create-list'),
    createReminder: jxaPath('create-reminder'),
    deleteReminder: jxaPath('delete-reminder'),
    getList: jxaPath('get-list'),
    getLists: jxaPath('get-lists'),
    getReminder: jxaPath('get-reminder'),
    getReminders: jxaPath('get-reminders'),
    updateReminder: jxaPath('update-reminder'),
};
export async function execJXA(scriptPath, data) {
    const prefix = process.env.NODE_ENV === 'test' ? 'test' : '';
    const { stderr } = await execa(prefix + 'osascript', [
        '-l',
        'JavaScript',
        scriptPath,
        JSON.stringify(data),
    ]);
    return JSON.parse(stderr);
}
/**
 * Takes an object and return an equivalent object with string dates converted to Date objects
 */
export function withParsedDates(data) {
    const dateProps = [
        'completionDate',
        'creationDate',
        'dueDate',
        'modificationDate',
        'remindMeDate',
    ];
    const final = Object.keys(data).reduce((obj, prop) => {
        const isDate = dateProps.indexOf(prop) !== -1;
        const val = data[prop];
        const newObj = { ...obj, [prop]: isDate ? new Date(val) : val };
        return newObj;
    }, {});
    return final;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidXRpbHMuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi9zcmMvbGliL3V0aWxzLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLE9BQU8sS0FBSyxNQUFNLE9BQU8sQ0FBQztBQUMxQixPQUFPLEtBQUssSUFBSSxNQUFNLE1BQU0sQ0FBQztBQUU3QixNQUFNLG1CQUFtQixHQUFHLEtBQUssQ0FBQztBQUVsQyxTQUFTLE9BQU8sQ0FBQyxJQUFZO0lBQzNCLE9BQU8sSUFBSSxDQUFDLElBQUksQ0FBQyxTQUFTLEVBQUUsSUFBSSxFQUFFLG1CQUFtQixFQUFFLEdBQUcsSUFBSSxNQUFNLENBQUMsQ0FBQztBQUN4RSxDQUFDO0FBRUQsTUFBTSxDQUFDLE1BQU0sV0FBVyxHQUFHO0lBQ3pCLFVBQVUsRUFBRSxPQUFPLENBQUMsYUFBYSxDQUFDO0lBQ2xDLGNBQWMsRUFBRSxPQUFPLENBQUMsaUJBQWlCLENBQUM7SUFDMUMsY0FBYyxFQUFFLE9BQU8sQ0FBQyxpQkFBaUIsQ0FBQztJQUMxQyxPQUFPLEVBQUUsT0FBTyxDQUFDLFVBQVUsQ0FBQztJQUM1QixRQUFRLEVBQUUsT0FBTyxDQUFDLFdBQVcsQ0FBQztJQUM5QixXQUFXLEVBQUUsT0FBTyxDQUFDLGNBQWMsQ0FBQztJQUNwQyxZQUFZLEVBQUUsT0FBTyxDQUFDLGVBQWUsQ0FBQztJQUN0QyxjQUFjLEVBQUUsT0FBTyxDQUFDLGlCQUFpQixDQUFDO0NBQzNDLENBQUM7QUFFRixNQUFNLENBQUMsS0FBSyxVQUFVLE9BQU8sQ0FBWSxVQUFrQixFQUFFLElBQVE7SUFDbkUsTUFBTSxNQUFNLEdBQUcsT0FBTyxDQUFDLEdBQUcsQ0FBQyxRQUFRLEtBQUssTUFBTSxDQUFDLENBQUMsQ0FBQyxNQUFNLENBQUMsQ0FBQyxDQUFDLEVBQUUsQ0FBQztJQUU3RCxNQUFNLEVBQUUsTUFBTSxFQUFFLEdBQUcsTUFBTSxLQUFLLENBQUMsTUFBTSxHQUFHLFdBQVcsRUFBRTtRQUNuRCxJQUFJO1FBQ0osWUFBWTtRQUNaLFVBQVU7UUFDVixJQUFJLENBQUMsU0FBUyxDQUFDLElBQUksQ0FBQztLQUNyQixDQUFDLENBQUM7SUFFSCxPQUFPLElBQUksQ0FBQyxLQUFLLENBQUMsTUFBTSxDQUFDLENBQUM7QUFDNUIsQ0FBQztBQUVEOztHQUVHO0FBQ0gsTUFBTSxVQUFVLGVBQWUsQ0FBNEMsSUFBTztJQUNoRixNQUFNLFNBQVMsR0FBdUI7UUFDcEMsZ0JBQWdCO1FBQ2hCLGNBQWM7UUFDZCxTQUFTO1FBQ1Qsa0JBQWtCO1FBQ2xCLGNBQWM7S0FDZixDQUFDO0lBQ0YsTUFBTSxLQUFLLEdBQUcsTUFBTSxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsQ0FBQyxNQUFNLENBQUMsQ0FBQyxHQUFHLEVBQUUsSUFBSSxFQUFFLEVBQUU7UUFDbkQsTUFBTSxNQUFNLEdBQUcsU0FBUyxDQUFDLE9BQU8sQ0FBQyxJQUFJLENBQUMsS0FBSyxDQUFDLENBQUMsQ0FBQztRQUM5QyxNQUFNLEdBQUcsR0FBRyxJQUFJLENBQUMsSUFBSSxDQUFDLENBQUM7UUFDdkIsTUFBTSxNQUFNLEdBQUcsRUFBRSxHQUFHLEdBQUcsRUFBRSxDQUFDLElBQUksQ0FBQyxFQUFFLE1BQU0sQ0FBQyxDQUFDLENBQUMsSUFBSSxJQUFJLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQyxDQUFDLEdBQUcsRUFBRSxDQUFDO1FBQ2hFLE9BQU8sTUFBTSxDQUFDO0lBQ2hCLENBQUMsRUFBRSxFQUFFLENBQUMsQ0FBQztJQUNQLE9BQU8sS0FBVSxDQUFDO0FBQ3BCLENBQUMifQ==